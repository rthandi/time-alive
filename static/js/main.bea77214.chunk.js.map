{"version":3,"sources":["index.js"],"names":["MonthsCalc","props","monthsAlive","date","getFullYear","getYear","dateOfBirth","getMonth","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","DaysCalc","date1","date2","daysAlive","day1","month1","year1","day2","month2","year2","dayMonths","total1","i","countLeapYearsBefore","total2","parseInt","calculateDays","getDay","substring","hoursAlive","getHours","minsAlive","getMinutes","secsAlive","getSeconds","DoBForm","_this","Object","_home_robbie_Documents_react_time_alive_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_robbie_Documents_react_time_alive_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_robbie_Documents_react_time_alive_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","Date","handleChange","bind","_home_robbie_Documents_react_time_alive_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","event","setState","target","value","_this2","timerID","setInterval","tick","clearInterval","name","type","onChange","toString","hideAlive","React","Component","year","month","outputYear","Math","floor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bea77214.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction MonthsCalc(props) {\n    const monthsAlive = ((props.date.getFullYear() - getYear(props.dateOfBirth)) * 12) + (props.date.getMonth() - getMonth(props.dateOfBirth));\n    return (\n        <h2>You have been alive for {monthsAlive} months</h2>\n    )\n}\n\nfunction DaysCalc(props) {\n    const date1 = props.date;\n    const date2 = props.dateOfBirth;\n    const daysAlive = calculateDays(date1.getDay(), date1.getMonth(), date1.getFullYear(), getDay(date2), getMonth(date2), getYear(date2));\n    const hoursAlive = daysAlive * 24 + date1.getHours();\n    const minsAlive = hoursAlive * 60 + date1.getMinutes();\n    const secsAlive = minsAlive * 60 + date1.getSeconds();\n    return (\n        <div>\n            <h2>Equivalent to: {daysAlive} days</h2>\n            <h2>Equivalent to: {hoursAlive} hours</h2>\n            <h2>Equivalent to: {minsAlive} minutes</h2>\n            <h2>Equivalent to: {secsAlive} seconds</h2>\n        </div>\n    )\n}\n\nclass DoBForm extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            dateOfBirth: null,\n            date: new Date(),\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({dateOfBirth: event.target.value})\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    // TODO: update this so it doesn't reset the form\n    tick() {\n        this.setState({\n            date: new Date()\n        });\n    }\n\n    hideAlive() {\n        if(this.state.date && this.state.dateOfBirth){\n            return (\n                <div>\n                    <MonthsCalc\n                        dateOfBirth = {this.state.dateOfBirth}\n                        date = {this.state.date}\n                    />\n                    <DaysCalc\n                        dateOfBirth = {this.state.dateOfBirth}\n                        date = {this.state.date}\n                    />\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <form>\n                    <label>\n                        Date of birth:\n                        <input\n                            name=\"dob\"\n                            type=\"date\"\n                            value={this.state.dateOfBirth}\n                            onChange={this.handleChange}\n                        />\n                    </label>\n                </form>\n                <div>\n                    <h2>It is currently {this.state.date.toString()}</h2>\n                </div>\n                <div>\n                    {this.hideAlive()}\n                </div>\n            </div>\n        )\n    }\n}\n\nReactDOM.render(<DoBForm />,\n    document.getElementById('root'));\n\nfunction countLeapYearsBefore(year, month){\n    let outputYear = year;\n    if (month <= 2){\n        outputYear--\n    }\n    return Math.floor((outputYear/4) - (outputYear/100) + (outputYear/400));\n}\n\nfunction calculateDays(day1, month1, year1, day2, month2, year2) {\n    //TODO: this seems to be about a month out - fix\n    const dayMonths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n    let total1 = year1 * 365 + day1;\n    for (let i = 0; i < month1 - 1; i++) {\n        total1 += dayMonths[i];\n    }\n    total1 += countLeapYearsBefore(year1, month1);\n\n    let total2 = year2 * 365 + parseInt(day2);\n    for (let i = 0; i < month2 - 1; i++) {\n        total2 += dayMonths[i];\n    }\n    total2 += countLeapYearsBefore(year2, month2);\n\n    //temp hacky fix to the issue in the to do above\n    return(total1 - total2) + 54\n}\n\nfunction getYear(date) {\n    return date.substring(0, 4);\n}\n\nfunction getMonth(date) {\n    return date.substring(5, 7);\n}\n\nfunction getDay(date) {\n    return date.substring(8);\n}"],"sourceRoot":""}